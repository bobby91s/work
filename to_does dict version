import sys, os, string, random
from collections import OrderedDict

the_key = "".join(random.sample(string.ascii_letters,3))
menu_actions = {}
to_dos = {}
done = True
not_done = False


# Prints out the main menu and let's you choose the submenu
def main_menu():
    os.system('clear')

    print 'Welcome to the To-Do-List Main Menu \n'
    print 'Please choose the option that you want by typing the index'
    print '1. View To-Do'
    print '2. Add To-Do'
    print '3. Edit To-Do'
    print '4. Delete To-Do'
    print '5. Search'
    print '6. Exit'
    print '\n'

    choice = raw_input()
    exec_menu(choice)
    return


#Execute Menu - with this function we can execute each menu just by typing the index from the main menu
def exec_menu(choice):
    os.system('clear')
    ch = choice
    if ch == '':
        menu_actions['main_menu']()
    else:
        try:
            menu_actions[ch]()
        except KeyError:
            print 'Invalid selection, please try again.\n'
            menu_actions['main_menu']()
    return


#View Menu
def view_todo():
    if len(to_dos) == 0:
        print 'Nothing To Do yet'
    else:
        both = raw_input('Would you like to see both done and not done To Do-s? y/n \n')
        if both == 'y':
            # this is how you add an index nr to each added element that is printed
            ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
            for key, things_to_do in ordered_to_dos.items():
                index = ordered_to_dos.keys().index(key) + 1
                print index, things_to_do['title']


        else:
            which = raw_input('View the -done- ones or the -not done- one? \n')
            if which == 'done':
                ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
                for key, todo in ordered_to_dos.items():
                    if todo['done'] == True:
                        print todo['title']

            elif which == 'not done':
                ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
                for key, todo in ordered_to_dos.items():
                    if todo['done'] == False:
                        print todo['title']


    print '0. Back'
    choice = raw_input()
    exec_menu(choice)
    return


#Add Menu
def add_todo():
    the_key = "".join(random.sample(string.ascii_letters,3))
    add = raw_input('Add a To Do to your list: ')
    to_dos[the_key] = {'done': False, 'title':add}

    ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
    for key, things_to_do in ordered_to_dos.items():
        index = ordered_to_dos.keys().index(key) + 1
    print "You've added", add, "to your To Do List"
    print '0. Back or 2. Add another one'
    choice = raw_input()
    exec_menu(choice)
    return


# # Edit Menu
def edit_todo():
    ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
    for key, things_to_do in ordered_to_dos.items():
        index = ordered_to_dos.keys().index(key) + 1
        print index, things_to_do['title']

    this_one = int(raw_input('Choose which To Do you want to edit: \n'))
    for change_this, values in ordered_to_dos.items():
        change_this = ordered_to_dos.keys()[this_one- 1]
        change_this_title = ordered_to_dos[change_this]['title']
        if ordered_to_dos[change_this]['done'] == False:
            ordered_to_dos[change_this]['done'] = True
            print change_this_title, 'is now done'

        elif ordered_to_dos[change_this]['done'] == True:
            ordered_to_dos[change_this]['done'] = False
            print change_this_title, 'is now not done'

    print '0. Back or 3. Edit another one'
    choice = raw_input()
    exec_menu(choice)
    return


#Delete Menu
def del_todo():
    ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
    for key, things_to_do in ordered_to_dos.items():
        index = ordered_to_dos.keys().index(key) + 1
        print index, things_to_do['title']

    which = int(raw_input('Which To Do would you like to delete? \n'))
    for remove_this, values in ordered_to_dos.items():
        remove_this = ordered_to_dos.keys()[which- 1]

        if remove_this in to_dos:
            del to_dos[remove_this]

        remove_this_title = ordered_to_dos[remove_this]['title']
        print remove_this_title, 'has been deleted from your To Do List'


    print '0. Back or 4. Delete another one'
    choice = raw_input()
    exec_menu(choice)
    return


#Search menu
def search():
    search_this = raw_input('Type a key-word and we will show you all To-Dos with that word in them: \n')
    print 'You have searched for', search_this, ',hsere are your results:'
    ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
    for k, v in ordered_to_dos.items():
        if search_this in ordered_to_dos[k]['title']:
            print ordered_to_dos[k]['title']

    print '0. Back or 5. Search for another one'
    choice = raw_input()
    exec_menu(choice)
    return

#Back to main menu
def back():
    menu_actions['main_menu']()
    ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))

#Closing the program
def quit():
    sys.exit()


#Menu Definitions
menu_actions = {
    'main_menu': main_menu,
    '1' : view_todo,
    '2' : add_todo,
    '3' : edit_todo,
    '4' : del_todo,
    '5' : search,
    '6' : exit,
    '0' : back
}


if __name__ == "__main__":
    main_menu()
