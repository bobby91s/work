import sys, os, string, random
from collections import OrderedDict


menu_actions = {}
to_dos = {}
done = True
not_done = False


# Prints out the main menu and let's you choose the submenu
def main_menu():
    os.system('clear')

    print 'Welcome to the To-Do-List Main Menu \n'
    print 'Please choose the option that you want by typing the index'
    print '1. View To-Do'
    print '2. Add To-Do'
    print '3. Edit To-Do'
    print '4. Delete To-Do'
    print '5. Exit'

    choice = raw_input()
    exec_menu(choice)
    return


#Execute Menu
def exec_menu(choice):
    os.system('clear')
    ch = choice
    if ch == '':
        menu_actions['main_menu']()
    else:
        try:
            menu_actions[ch]()
        except KeyError:
            print 'Invalid selection, please try again.\n'
            menu_actions['main_menu']()
    return


#View Menu ------------- needs work, partially done, still need to sort done/not done
def view_todo():
    if len(to_dos) == 0:
        print 'Nothing To Do yet'
    else:
        both = raw_input('Would you like to see both done and not done To Do-s? y/n')
        if both == 'y':
            # this is how you add an index nr to each added element that is printed
            ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
            for key, things_to_do in ordered_to_dos.items():
                index = ordered_to_dos.keys().index(key) + 1
                print index, things_to_do['title']

        else:
            which = raw_input('View the -done- ones or the -not done- one?')
            if which == 'done':
                ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
                for todo in ordered_to_dos:
                    if todo['done'] == True:
                        print todo['title']

            else:
                ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
                for todo in ordered_to_dos:
                    if todo['done'] == False:
                        print todo['title']


    print '0. Back'
    choice = raw_input()
    exec_menu(choice)
    return


#Add Menu
def add_todo():
    the_key = "".join(random.sample(string.ascii_letters,3))
    add = raw_input('Add a To Do to your list: ')
    to_dos[the_key] = {'done': False, 'title':add}
    print to_dos
    for k in to_dos:
        print k
    print '0. Back or 2. Add another one'
    choice = raw_input()
    exec_menu(choice)
    return


# # Edit Menu ----------- needs work
# def edit_todo():
#     for todo in to_dos:
#         print todo
#
#     which = int(raw_input('Choose which To Do you want to edit: '))
#     ordered_to_dos = OrderedDict(sorted(to_dos.items(), key = lambda t: t[0]))
#     for k,v  in ordered_to_dos.items():
#         index = to_dos.keys().index(k) + 1
#         if which == index:
#
#
#     print '0. Back or 3. Edit another one'
#     choice = raw_input()
#     exec_menu(choice)
#     return


#Delete Menu  ------------ needs work
# def del_todo():
#     for todo in to_dos:
#         print todo
#
#     which = int(raw_input('Which To Do would you like to delete? '))
#     to_remove = to_dos[which-1]
#     to_dos.remove(to_remove)
#
#     print '0. Back or 4. Delete another one'
#     choice = raw_input()
#     exec_menu(choice)
#     return


#Back to main menu
def back():
    menu_actions['main_menu']()


#Closing the program
def quit():
    sys.exit()


#Menu Definitions
menu_actions = {
    'main_menu': main_menu,
    '1' : view_todo,
    '2' : add_todo,
    # '3' : edit_todo,
    # '4' : del_todo,
    '5' : exit,
    '0' : back
}


if __name__ == "__main__":
    main_menu()
